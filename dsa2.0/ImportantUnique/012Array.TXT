leetcode 75
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

let arr = [2, 0, 2, 1, 1, 0];
arr.sort((a, b) => a - b); // JavaScript sort (numeric ascending)
console.log(arr); // [0, 0, 1, 1, 2, 2]
Time: O(n)
Space: O(1)


function sortColors(nums) {
  let low = 0, mid = 0, high = nums.length - 1;

  while (mid <= high) {
    if (nums[mid] === 0) {
      [nums[low], nums[mid]] = [nums[mid], nums[low]];
      low++;
      mid++;
    } else if (nums[mid] === 1) {
      mid++;
    } else { // nums[mid] === 2
      [nums[mid], nums[high]] = [nums[high], nums[mid]];
      high--;
    }
  }

  return nums;
}

let arr = [2, 0, 2, 1, 1, 0];
console.log(sortColors(arr)); // [0, 0, 1, 1, 2, 2]
⏱️ Complexity:

Time: O(n) — single traversal

Space: O(1) — in-place

✅ Optimal solution