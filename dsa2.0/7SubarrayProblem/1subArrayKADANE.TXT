brute force
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

function maxSubArray(nums) {
  let max = -Infinity;
  for (let i = 0; i < nums.length; i++) {
    for (let j = i; j < nums.length; j++) {
      let sum = 0;
      for (let k = i; k <= j; k++) {
        sum += nums[k]; // sum each subarray
      }
      max = Math.max(max, sum);
    }
  }
  return max;
}

ðŸ•’ Time Complexity: O(nÂ³)
ðŸ’¾ Space: O(1)



optimal
function maxSubArray(nums) {
  let currSum = nums[0];
  let maxSum = nums[0];

  for (let i = 1; i < nums.length; i++) {
    currSum = Math.max(nums[i], currSum + nums[i]); // extend or start new
    maxSum = Math.max(maxSum, currSum); // update global max
  }

  return maxSum;
}
ðŸ•’ Time Complexity: O(n)
ðŸ’¾ Space: O(1)
